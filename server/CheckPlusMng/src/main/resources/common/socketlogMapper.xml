<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.peelknight.mybatis.socketlogMapper">
	<update id="createSHSocketLog" parameterType="java.util.Map" statementType="PREPARED">
		CREATE TABLE SH_SocketLog (
			idKey BIGINT NOT NULL AUTO_INCREMENT,
			logDate DATETIME NULL,
			socketSeq BIGINT NULL,
			dataLen INT NULL,
			data TEXT NULL,
			PRIMARY KEY (idKey)
		);
	</update>
	
	<select id="selectSocketLog" resultType="kr.peelknight.socket.model.SH_SocketLog"
			statementType="PREPARED" parameterType="java.util.Map">
		SELECT idKey, logDate, socketSeq, dataLen, data
		  FROM SH_SocketLog
		 WHERE idKey <![CDATA[ > ]]> 0
		<if test="idKey != null">
		   AND idKey = #{idKey}
		</if>
		<if test="offset != null and size != null">
		 LIMIT ${offset}, ${size}
		</if>
	</select>

	<select id="selectSocketLogPaging" resultType="kr.peelknight.common.model.CM_Paging"
			statementType="PREPARED" parameterType="java.util.Map">
		SELECT COUNT(idKey) as totalCount
		  FROM SH_SocketLog
		 WHERE idKey <![CDATA[ > ]]> 0
		<if test="idKey != null">
		   AND idKey = #{idKey}
		</if>
	</select>

	<insert id="insertSocketLog" parameterType="kr.peelknight.socket.model.SH_SocketLog"
		statementType="PREPARED" useGeneratedKeys="true" keyProperty="idKey">
		INSERT INTO SH_SocketLog (
			idKey, logDate, socketSeq, dataLen, data
		) VALUES (
			#{idKey}, #{logDate}, #{socketSeq}, #{dataLen}, #{data}
		)
	</insert>
</mapper>